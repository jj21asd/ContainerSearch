plugins {
    id 'common_process_resources'
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation include("maven.modrinth:midnightlib:${midnight_lib_version_fabric}")

    // Compatible mods
    modImplementation "atonkish.reinfcore:reinforced-core:${reinf_core_version}"
    modImplementation "maven.modrinth:mythicmetals-decorations:${mythic_metals_dec_version}"

    if (load_compatible_mods) {
        modRuntimeOnly "maven.modrinth:reinforced-chests:${reinf_chests_version}"
        modRuntimeOnly "maven.modrinth:reinforced-shulker-boxes:${reinf_shulker_boxes_version}"
        modRuntimeOnly "maven.modrinth:reinforced-barrels:${reinf_barrels_version}"

        // All bundled mods have to be extracted from META-INF/jars to run/mods manually
        // (except owo-sentinel) because there are to many to add every single one through gradle
        modRuntimeOnly "maven.modrinth:mythicmetals:${mythic_metals_version}"
        modRuntimeOnly "maven.modrinth:alloy-forgery:${alloy_forgery_version}"
        modRuntimeOnly "maven.modrinth:owo-lib:${owo_lib_version}"
    }

    // ShulkerBoxTooltip (useful for testing with Shulkers)
    modRuntimeOnly "maven.modrinth:shulkerboxtooltip:${shulkerboxtooltip_version_fabric}"
    modRuntimeOnly "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile as Provider<? extends RegularFile>
}
